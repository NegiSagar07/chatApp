{"ast":null,"code":"var _jsxFileName = \"/home/negi/coding/majorPro/chatApp/frontend/src/components/Messages.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst Messages = () => {\n  _s();\n  var _location$state;\n  const location = useLocation();\n  const currentUser = ((_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.username) || 'Guest';\n  const [chatpartner, setchatpartner] = useState(\"\");\n  // State to track current message input\n  const [message, setMessage] = useState(\"\");\n\n  // State to store the list of messages\n  const [messageHistory, setMessageHistory] = useState([]);\n\n  // Static user for this example\n  // You can replace this with dynamic user data\n\n  const getroomId = () => {\n    return [currentUser, chatpartner].sort().join('-');\n  };\n\n  // Function to handle sending message\n  const sendMessage = e => {\n    e.preventDefault();\n    if (message.trim() === '') return; // Prevent sending empty messages\n\n    const roomId = getroomId();\n    const messageData = {\n      roomId,\n      user: currentUser,\n      text: message\n    };\n\n    // Emit the message to the server via socket\n    socket.emit('chat message', messageData);\n\n    // Add the sent message to the message history\n    setMessageHistory(prevHistory => [...prevHistory, messageData]);\n\n    // Clear the input field\n    setMessage(\"\");\n  };\n  useEffect(() => {\n    if (chatpartner) {\n      const roomId = getroomId();\n\n      // Join the room for the current conversation\n      socket.emit('join-room', roomId);\n\n      // Listen for messages from the server\n      socket.on('receive message', msg => {\n        setMessageHistory(prevHistory => [...prevHistory, msg]); // Update message history\n      });\n\n      // Cleanup when the component unmounts or chat partner changes\n      return () => {\n        socket.emit('leave-room', roomId); // Leave the room when done\n        socket.off('receive message'); // Remove the message listener\n      };\n    }\n  }, [chatpartner, currentUser]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"select chat partner\",\n      value: chatpartner,\n      onChange: e => setchatpartner(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-box\",\n      children: messageHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: msg.user === currentUser ? \"sent-message\" : \"received-message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.user === currentUser ? 'You' : msg.user, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Messages, \"GNxdFwbnvffIY6FiZxD9d33JoVE=\", false, function () {\n  return [useLocation];\n});\n_c = Messages;\nexport default Messages;\nvar _c;\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"names":["React","useState","useEffect","io","useLocation","jsxDEV","_jsxDEV","socket","Messages","_s","_location$state","location","currentUser","state","username","chatpartner","setchatpartner","message","setMessage","messageHistory","setMessageHistory","getroomId","sort","join","sendMessage","e","preventDefault","trim","roomId","messageData","user","text","emit","prevHistory","on","msg","off","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","className","map","index","onSubmit","_c","$RefreshReg$"],"sources":["/home/negi/coding/majorPro/chatApp/frontend/src/components/Messages.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport { useLocation } from 'react-router-dom';\n\nconst socket = io('http://localhost:5000');\n\nconst Messages = () => {\n\n  const location = useLocation(); \n  const currentUser = location.state?.username || 'Guest'; \n  const [chatpartner, setchatpartner] = useState(\"\");\n    // State to track current message input\n    const [message, setMessage] = useState(\"\");\n\n    // State to store the list of messages\n    const [messageHistory, setMessageHistory] = useState([]);\n\n    // Static user for this example\n    // You can replace this with dynamic user data\n\n    const getroomId = () => {\n      return [currentUser,chatpartner].sort().join('-');\n    }\n\n    // Function to handle sending message\n    const sendMessage = (e) => {\n        e.preventDefault();\n        if (message.trim() === '') return; // Prevent sending empty messages\n\n        const roomId = getroomId();\n    \n        const messageData = {\n          roomId,\n          user: currentUser,\n          text: message,\n        };\n    \n        // Emit the message to the server via socket\n        socket.emit('chat message', messageData);\n\n        // Add the sent message to the message history\n        setMessageHistory((prevHistory) => [...prevHistory, messageData]);\n\n        // Clear the input field\n        setMessage(\"\");\n    };\n\n    useEffect(() => {\n      if (chatpartner) {\n        const roomId = getroomId();\n  \n        // Join the room for the current conversation\n        socket.emit('join-room', roomId);\n  \n        // Listen for messages from the server\n        socket.on('receive message', (msg) => {\n          setMessageHistory((prevHistory) => [...prevHistory, msg]); // Update message history\n        });\n  \n        // Cleanup when the component unmounts or chat partner changes\n        return () => {\n          socket.emit('leave-room', roomId); // Leave the room when done\n          socket.off('receive message'); // Remove the message listener\n        };\n      }\n    }, [chatpartner, currentUser]);\n\n  return (\n    <div>\n        <input type='text' placeholder='select chat partner' value={chatpartner} onChange={(e) => setchatpartner(e.target.value)}/>\n        {/* Displaying the message history */}\n        <div className=\"message-box\">\n          {messageHistory.map((msg, index) => (\n            <div key={index} className={msg.user === currentUser ? \"sent-message\" : \"received-message\"}>\n            {/* Differentiate messages sent by the user and received from others */}\n            <strong>{msg.user === currentUser ? 'You' : msg.user}:</strong> {msg.text}\n            </div>\n          ))}\n        </div>\n\n        {/* Input form to send messages */}\n        <form onSubmit={sendMessage}>\n            <input \n                type='text' \n                value={message} \n                onChange={(e) => setMessage(e.target.value)} \n                placeholder=\"Type your message...\"\n            />\n            <button type=\"submit\">Send</button>\n        </form>\n    </div>\n  )\n}\n\nexport default Messages;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}