{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { io } from 'socket.io-client';\n\n// // Initialize the socket connection to the backend\n// const socket = io('http://localhost:5000');  // Connecting to the backend Socket.io server\n\n// function App() {\n//   // States to hold form inputs and messages\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [receivedMessage, setReceivedMessage] = useState(\"\");  // For displaying received chat messages\n\n//   // Handle form submission to register a new user\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n\n//   //   const user = {\n//   //     name: username,\n//   //     email: email,\n//   //     password: password\n//   //   };\n\n//   //   try {\n//   //     const response = await fetch('/signup', {  // Using full backend URL\n//   //       method: 'POST',\n//   //       headers: {\n//   //         'Content-Type': 'application/json'\n//   //       },\n//   //       body: JSON.stringify(user)\n//   //     });\n\n//   //     if (!response.ok) {\n//   //       throw new Error(\"Response is not ok\");\n//   //     }\n\n//   //     const message = await response.json();\n//   //     console.log(message);\n//   //     alert(message.message);  // Show an alert when signup is successful\n\n//   //   } catch (error) {\n//   //     console.error(\"Error:\", error);\n//   //   }\n//   // };\n\n//   // Handle chat message submission\n//   const sendMessage = (e) => {\n//     e.preventDefault();\n//     socket.emit('chat message', message);  // Emit the 'chat message' event with the message data\n//     setMessage(\"\");  // Clear the input field after sending\n//   };\n\n//   // Listen for incoming messages from the server\n//   useEffect(() => {\n//     // Listen for the 'chat message' event\n//     socket.on('chat message', (msg) => {\n//       console.log('Received from server:', msg);\n//       setReceivedMessage(msg);  // Update state with received message\n//     });\n\n//     // Cleanup the event listener when the component unmounts\n//     return () => {\n//       socket.off('chat message');\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {/* Sign Up Form */}\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type='text'\n//           placeholder='Username'\n//           value={username}\n//           onChange={(e) => setUsername(e.target.value)}\n//           required\n//         />\n//         <input\n//           type='email'\n//           placeholder='Email'\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           required\n//         />\n//         <input\n//           type='password'\n//           placeholder='Password'\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           required\n//         />\n//         <button type=\"submit\">Sign Up</button>\n//       </form>\n\n//       {/* Chat Section */}\n//       <form onSubmit={sendMessage}>\n//         <input\n//           type='text'\n//           placeholder='Write message'\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button type=\"submit\">Send Message</button>\n//       </form>\n\n//       {/* Display received chat message */}\n//       <div>\n//         <h3>Received Message:</h3>\n//         <p>{receivedMessage}</p>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["/home/negi/coding/majorPro/chatApp/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { io } from 'socket.io-client';\n\n// // Initialize the socket connection to the backend\n// const socket = io('http://localhost:5000');  // Connecting to the backend Socket.io server\n\n// function App() {\n//   // States to hold form inputs and messages\n//   const [username, setUsername] = useState(\"\");\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [receivedMessage, setReceivedMessage] = useState(\"\");  // For displaying received chat messages\n\n//   // Handle form submission to register a new user\n//   // const handleSubmit = async (e) => {\n//   //   e.preventDefault();\n\n//   //   const user = {\n//   //     name: username,\n//   //     email: email,\n//   //     password: password\n//   //   };\n\n//   //   try {\n//   //     const response = await fetch('/signup', {  // Using full backend URL\n//   //       method: 'POST',\n//   //       headers: {\n//   //         'Content-Type': 'application/json'\n//   //       },\n//   //       body: JSON.stringify(user)\n//   //     });\n\n//   //     if (!response.ok) {\n//   //       throw new Error(\"Response is not ok\");\n//   //     }\n\n//   //     const message = await response.json();\n//   //     console.log(message);\n//   //     alert(message.message);  // Show an alert when signup is successful\n\n//   //   } catch (error) {\n//   //     console.error(\"Error:\", error);\n//   //   }\n//   // };\n\n//   // Handle chat message submission\n//   const sendMessage = (e) => {\n//     e.preventDefault();\n//     socket.emit('chat message', message);  // Emit the 'chat message' event with the message data\n//     setMessage(\"\");  // Clear the input field after sending\n//   };\n\n//   // Listen for incoming messages from the server\n//   useEffect(() => {\n//     // Listen for the 'chat message' event\n//     socket.on('chat message', (msg) => {\n//       console.log('Received from server:', msg);\n//       setReceivedMessage(msg);  // Update state with received message\n//     });\n\n//     // Cleanup the event listener when the component unmounts\n//     return () => {\n//       socket.off('chat message');\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {/* Sign Up Form */}\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type='text'\n//           placeholder='Username'\n//           value={username}\n//           onChange={(e) => setUsername(e.target.value)}\n//           required\n//         />\n//         <input\n//           type='email'\n//           placeholder='Email'\n//           value={email}\n//           onChange={(e) => setEmail(e.target.value)}\n//           required\n//         />\n//         <input\n//           type='password'\n//           placeholder='Password'\n//           value={password}\n//           onChange={(e) => setPassword(e.target.value)}\n//           required\n//         />\n//         <button type=\"submit\">Sign Up</button>\n//       </form>\n\n//       {/* Chat Section */}\n//       <form onSubmit={sendMessage}>\n//         <input\n//           type='text'\n//           placeholder='Write message'\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//         />\n//         <button type=\"submit\">Send Message</button>\n//       </form>\n\n//       {/* Display received chat message */}\n//       <div>\n//         <h3>Received Message:</h3>\n//         <p>{receivedMessage}</p>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}