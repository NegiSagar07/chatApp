{"ast":null,"code":"var _jsxFileName = \"/home/negi/coding/majorPro/chatApp/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { io } from 'socket.io-client';\n\n// Initialize the socket connection to the backend\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000'); // Connecting to the backend Socket.io server\n\nfunction App() {\n  _s();\n  // States to hold form inputs and messages\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [receivedMessage, setReceivedMessage] = useState(\"\"); // For displaying received chat messages\n\n  // Handle form submission to register a new user\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   const user = {\n  //     name: username,\n  //     email: email,\n  //     password: password\n  //   };\n\n  //   try {\n  //     const response = await fetch('/signup', {  // Using full backend URL\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(user)\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error(\"Response is not ok\");\n  //     }\n\n  //     const message = await response.json();\n  //     console.log(message);\n  //     alert(message.message);  // Show an alert when signup is successful\n\n  //   } catch (error) {\n  //     console.error(\"Error:\", error);\n  //   }\n  // };\n\n  // Handle chat message submission\n  const sendMessage = e => {\n    e.preventDefault();\n    socket.emit('chat message', message); // Emit the 'chat message' event with the message data\n    setMessage(\"\"); // Clear the input field after sending\n  };\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    // Listen for the 'chat message' event\n    socket.on('chat message', msg => {\n      console.log('Received from server:', msg);\n      setReceivedMessage(msg); // Update state with received message\n    });\n\n    // Cleanup the event listener when the component unmounts\n    return () => {\n      socket.off('chat message');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Username\",\n        value: username,\n        onChange: e => setUsername(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        placeholder: \"Email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write message\",\n        value: message,\n        onChange: e => setMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Send Message\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Received Message:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: receivedMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4qj1Jy3I1H//aDdl/bJL3cfL65k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","jsxDEV","_jsxDEV","socket","App","_s","username","setUsername","email","setEmail","password","setPassword","message","setMessage","receivedMessage","setReceivedMessage","sendMessage","e","preventDefault","emit","on","msg","console","log","off","children","onSubmit","handleSubmit","type","placeholder","value","onChange","target","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/negi/coding/majorPro/chatApp/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { io } from 'socket.io-client';\n\n// Initialize the socket connection to the backend\nconst socket = io('http://localhost:5000');  // Connecting to the backend Socket.io server\n\nfunction App() {\n  // States to hold form inputs and messages\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [receivedMessage, setReceivedMessage] = useState(\"\");  // For displaying received chat messages\n\n  // Handle form submission to register a new user\n  // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n\n  //   const user = {\n  //     name: username,\n  //     email: email,\n  //     password: password\n  //   };\n\n  //   try {\n  //     const response = await fetch('/signup', {  // Using full backend URL\n  //       method: 'POST',\n  //       headers: {\n  //         'Content-Type': 'application/json'\n  //       },\n  //       body: JSON.stringify(user)\n  //     });\n\n  //     if (!response.ok) {\n  //       throw new Error(\"Response is not ok\");\n  //     }\n\n  //     const message = await response.json();\n  //     console.log(message);\n  //     alert(message.message);  // Show an alert when signup is successful\n\n  //   } catch (error) {\n  //     console.error(\"Error:\", error);\n  //   }\n  // };\n\n  // Handle chat message submission\n  const sendMessage = (e) => {\n    e.preventDefault();\n    socket.emit('chat message', message);  // Emit the 'chat message' event with the message data\n    setMessage(\"\");  // Clear the input field after sending\n  };\n\n  // Listen for incoming messages from the server\n  useEffect(() => {\n    // Listen for the 'chat message' event\n    socket.on('chat message', (msg) => {\n      console.log('Received from server:', msg);\n      setReceivedMessage(msg);  // Update state with received message\n    });\n\n    // Cleanup the event listener when the component unmounts\n    return () => {\n      socket.off('chat message');\n    };\n  }, []);\n\n  return (\n    <div>\n      {/* Sign Up Form */}\n      <form onSubmit={handleSubmit}>\n        <input\n          type='text'\n          placeholder='Username'\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n          required\n        />\n        <input\n          type='email'\n          placeholder='Email'\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n        <input\n          type='password'\n          placeholder='Password'\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Sign Up</button>\n      </form>\n\n      {/* Chat Section */}\n      <form onSubmit={sendMessage}>\n        <input\n          type='text'\n          placeholder='Write message'\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n        />\n        <button type=\"submit\">Send Message</button>\n      </form>\n\n      {/* Display received chat message */}\n      <div>\n        <h3>Received Message:</h3>\n        <p>{receivedMessage}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}